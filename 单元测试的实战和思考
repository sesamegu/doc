单元测试对每个程序员都不陌生，是否必须写、单元测试覆盖率、TDD都有不少争议，这篇文章会基于笔者的经验和思考总结下。

## 1，单元测试的目标
讨论单元测试先回答，单元测试干什么用？答案是显而易见的，单元测试用来“保证代码的质量”。再继续往下问“代码的质量”通过什么来保证。老码农马上众说纷纭：“个人能力保证”、“测试人员保证”、“自测保证”，还有个别说“佛祖保证”。
我个人理解代码通过以下方面保证：

对于优秀的码农来说，良好的设计、严谨的编码就可以保证代码的bug非常少，后续各类测试以及保证手段可以很简单，整体质量非常高；
对于不优秀的码农来说，由于编码的过程本身就不够严谨，所以后续各类测试都非常充分，这样代码的质量也可以做的较好；

回归主题，可以得出一下结论：
结论：对于优秀的码农而言，单元测试并不是很重要；对于不优秀的码农或者团队，各类测试可以较好的保证质量，包括单元测试。


## 2，TDD 之我见
谈单元测试，必然会讨论到TDD(测试驱动) ，但是在仔细研读 Kent Beck大神的TDD并尝试实战多次后，发现TDD并不很美好。
好的地方：让开发具有测试思维，多视角看问题；
不好的地方：a）互联网的需求是多变的，TDD需要需求相对稳定； b）用TDD工作量会变大，现在互联网项目开发都有很高的进度要求；
c）TDD是反直接开发思维，对人员有较多要求。

后来无意中看到大神的另外一番言论，真是深得我心：“老板为我的代码付报酬，而不是测试，所以，我对此的价值观是——测试越少越好，少到你对你的代码质量达到了某种自信（我觉得这种的自信标准应该要高于业内的标准，当然，这种自信也可能是种自大）。如果我的编码生涯中不会犯这种典型的错误（如：在构造函数中设了个错误的值），那我就不会测试它。我倾向于去对那些有意义的错误做测试，所以，我对一些比较复杂的条件逻辑会异常地小心。当在一个团队中，我会非常小心的测试那些会让团队容易出错的代码。”

结论：TDD在互联网开发中是一个美好但不实际的骗局，劝大家不要采坑。

## 3，覆盖率
多少的单元测试覆盖率是合适的？基于前面的讨论，我们会对于优秀的程序员，只要准对最容易出错的代码进行覆盖就可以达到目标。对于普通的团队，大厂的经验是60%；千万不要追求100%的覆盖率，投入和产出比完成不成比率，这样的覆盖率只是不懂技术的领导的安慰剂。

结论：不要追求覆盖率，合适的才是最好的。


## 4，实战
前面谈的是理论和经验，最后谈下实战。这里基于java语言整体谈下，具体用法和细节参考其他文章，这类文章网上很多。
在java领域中，有两个主要框架JUnit、TestNG。个人倾向于用TestNG，原因是TestNG支持单元测试、集成测试等。
TestNG 核心注解：@Test @Asserts @dataprovider 。详细参见官网。
写单元测试必须用mockito框架：核心注解 @when/then @verify @mock 详细参见官网。
最后说一个单元测试的趋势，随着微服务大行其道，集成测试运行的代价也越来越小，单元测试和集成测试的边界越来越模糊。
